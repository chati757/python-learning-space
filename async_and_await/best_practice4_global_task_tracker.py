import asyncio
from typing import Set

# ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö task ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
active_tasks: Set[asyncio.Task] = set()

def track_task(coro) -> asyncio.Task:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞ track ‡∏°‡∏±‡∏ô‡πÉ‡∏ô active_tasks
    """
    task = asyncio.create_task(coro)
    active_tasks.add(task)

    def on_done(t: asyncio.Task):
        # ‡∏î‡∏∂‡∏á exception ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ warning "exception was never retrieved"
        try:
            result = t.exception()
            if(result):
                print(result)
        except Exception:
            pass
        # ‚ùå ‡∏•‡∏ö task ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å set
        active_tasks.discard(t)

    task.add_done_callback(on_done)
    return task

#---------------‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-------------------
async def do_work(name, delay):
    await asyncio.sleep(delay)
    if delay % 2 == 0:
        raise ValueError(f"Task {name} ‡∏û‡∏±‡∏á‡∏á‡∏á‡∏á‡∏á")
    print(f"‚úÖ Task {name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")

async def main():
    track_task(do_work("A", 2))
    track_task(do_work("B", 3))
    track_task(do_work("C", 1))

    while active_tasks:
        print(f"üìã ‡∏¢‡∏±‡∏á‡∏°‡∏µ task ‡∏≠‡∏¢‡∏π‡πà: {len(active_tasks)}")
        await asyncio.sleep(0.5)

asyncio.run(main())